c
candidate_sorted_seq[0].length
candidate_sorted_seq[0]
query_length[0]
query_length[0].size
query_length[0].length
query_length
candidate_sorted_seq
query_method
c
query_method
candidate_sorted_seq
query_string
c
candidate_sorted_seq
c
candidate_sorted_words
n
c
get_substrings(query_string,4)
get_substrings(query_string,2)
get_substrings(query_string,2).size
get_substrings(query_string,4).size
get_substrings(query_string,4).size\
get_substrings(query_string,4)
"estt"
get_substrings(query_string,2)
get_substring(query_string,2)
query_string
candidate_sorted_words
candidate_sorted_Words
max_length
min_length
c
candidate_sorted_words = self.where("sorted in (?)", candidate_sorted_words).pluck(:text) # benefit is that we need not check permutation of each sub-sequence of query string
candidate_sorted_words = self.where("sorted in [?]", candidate_sorted_words).pluck(:text) # benefit is that we need not check permutation of each sub-sequence of query string
candidate_sorted_words = self.where("sorted in ?", candidate_sorted_words).pluck(:text) # benefit is that we need not check permutation of each sub-sequence of query string
candidate_sorted_words = self.where("sorted in ?", new_array.join).pluck(:text) # benefit is that we need not check permutation of each sub-sequence of query string
candidate_sorted_words
get_substrings(query_string,3)
c
query_string
get_substrings(query_string,3)
max_length
min_length
candidate_sorted_words
candidate_sorted_Words
c
max_length
min_length
c
min_length
max_length
c
max_length
min_length
c
min_length
max_length
min_length
max_length
nil.to_i
c
nil.to_i
nil
min_length
max_length
c
min_length
max_length
c
max_length
min_length
c
query_string.length
query_string
max_length
min_length
c
params
c
params
c
min_length
max_length
c
params
c
params
c
max_length
min_length
c
query_length.empty?c
query_length.empty?
query_length
c
candidate_words.pluck(:text)
candidate_words
new_candidates.pluck(:text)
new_candidates
c
query_length
query_string
